# main config lists section to get personalty from
[default]
workflow       = ${LAR_WORKFLOW:-defaultwf}
#notify_email   = larsoft_build@fnal.gov
notify_email   = vito@fnal.gov
notify_success = true
notify_blame   = false
proxy_vo       = /fermilab/uboone
email_extra    = Experiment: ${CI_EXPERIMENT}<br>LArSoft version: ${LAR_REVISION:-develop}<br>Build type: ${LAR_QUALS}<br>Platform: `platform`<br>Workflow: ${WORKFLOW}<br>Jenkins project: ${JOB_NAME//\/*}, build ${BUILD_NUMBER}<br>Build slave: `hostname`<br>Trigger: ${TRIGGER_REASON}<br>For more details about this CI build status and to access the logs, please, see <a href="http://lar-ci-history.fnal.gov:8080/LarCI/app/view_builds/index">the web monitoring application</a>.<br>To access more logs see the <a href="$BUILD_URL">Jenkins project</a> web page.<br>
build_db_uri=http://dbweb6.fnal.gov:8080/TestCI/app
report_logs_extra=

#extra_revisions=dune-raw-data@v1_00_00


### workflows ###
[custom]
experiment    = LArSoft DUNE LArIAT ArgoNeuT
qualifier     = ${LAR_QUALS:-e10:prof}
ci_test_lists = quick_test_dunetpc quick_test_lariatsoft quick_test_argoneutcode
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft duneutil dunetpc lariatutil lariatsoft argoneutcode

[larsoft]
experiment  = LArSoft
qualifier   = ${LAR_QUALS:-e10:prof}
personality = mrb
proxy_flag  = false
phases      = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install
modules     = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft


[defaultwf]
experiment    = LArSoft uBooNE DUNE LArIAT ArgoNeuT
qualifier     = ${LAR_QUALS:-e10:prof}
#ci_test_lists = default
ci_test_lists = quick_test_uboonecode quick_test_dunetpc quick_test_lariatsoft quick_test_argoneutcode
#ci_test_lists = seq_test_uboonecode seq_test_dunetpc seq_test_lariatsoft seq_test_argoneutcode
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft ubutil uboonecode duneutil dunetpc lariatutil lariatsoft argoneutcode

[defaultwf_ifdhc2test]
experiment    = uBooNE
qualifier     = ${LAR_QUALS:-e10:prof}
personality   = mrb
proxy_flag    = true
phases        = _eval_n ifdh_test

[uboonecode]
experiment    = LArSoft uBooNE
qualifier     = ${LAR_QUALS:-e10:prof}
ci_test_lists = quick_test_uboonecode
personality   = mrb
proxy_flag    = true
#phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build install ci_tests
modules       = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft ubutil uboonecode

[uboonecodestandalone]
experiment    = uBooNE
qualifier     = ${LAR_QUALS:-e10:prof}
ci_test_lists = quick_test_uboonecode
personality   = mrb
proxy_flag    = true
#phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build install ci_tests
modules       = ubutil uboonecode

[dunetpc]
experiment    = LArSoft DUNE
qualifier     = ${LAR_QUALS:-e10:prof}
ci_test_lists = quick_test_dunetpc
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft duneutil dunetpc

[dunetpcstandalone]
experiment    = DUNE
qualifier     = ${LAR_QUALS:-e10:prof}
ci_test_lists = quick_test_dunetpc
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
#modules       = duneutil dunetpc
modules       = dunetpc

[lariatsoft]
experiment    = LArSoft LArIAT
qualifier     = ${LAR_QUALS:-e10:prof}
ci_test_lists = quick_test_lariatsoft
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft lariatutil lariatsoft


[lariatsoftstandalone]
experiment    = LArIAT
qualifier     = ${LAR_QUALS:-e10:prof}
ci_test_lists = quick_test_lariatsoft
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = lariatutil lariatsoft

[argoneutcode]
experiment    = LArSoft ArgoNeuT
qualifier     = ${LAR_QUALS:-e10:prof}
ci_test_lists = quick_test_argoneutcode
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft argoneutcode

[argoneutcod  estandalone]
experiment    = ArgoNeuT
qualifier     = ${LAR_QUALS:-e10:prof}
ci_test_lists = quick_test_argoneutcode
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = argoneutcode

### personalities ###
[mrb]
# define what the stages, below, do:
# eval_n:
_eval1 = source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh || source /grid/fermiapp/products/dune/setup_dune.sh; export PRODUCTS=${PRODUCTS}:/grid/fermiapp/products/common/db:/grid/fermiapp/products/lariat:/grid/fermiapp/products/argoneut
_eval2 = . `ups setup ups`
_eval3 = PRODUCTS=`dropit -D -E -p $PRODUCTS:/grid/fermiapp/products/uboone:/cvmfs/oasis.opensciencegrid.org/microboone/products:/cvmfs/uboone.opensciencegrid.org/products`
_eval4 = LAR_QUALS="${qualifier}"; if uname -a | grep Darwin ; then  modules="$modules lariatfragments"; fi
_eval5 = `mrb newDev -f -v ${proj_PREFIX}_ci -q $LAR_QUALS | grep source`
_eval6 = source ${MRB_DIR}/bin/mrbSetEnv 
# MacOS bits -- get the cmake from scisoft
#_eval7 = export LANG="C"
#_eval8 = if uname -a | grep Darwin ; then  mkprd -r `pwd`/p;  cd p; fetch_and_unwind http://scisoft.fnal.gov/scisoft/packages/cmake/v3_3_2/cmake-3.3.2-d13-x86_64.tar.bz2 http://scisoft.fnal.gov/scisoft/packages/cmake/v3_3_2/cmake-3.3.2-d14-x86_64.tar.bz2 ftp://ftp.fnal.gov/products/ifdh_platform_pkgs/v0_2/Darwin64bit/ifdh_platform_pkgs_v0_2_Darwin64bit+unified.tar.gz; PRODUCTS=`pwd`:$PRODUCTS; cd .. ; ups list -a -z `pwd`/p; setup -z `pwd`/p cmake v3_3_2 ; setup -z `pwd`/p  ifdh_platform_pkgs v0_2; echo $PRODUCTS; fi; ups active

# checkout_x_modules does this for each $module in $modules
checkoutdir = ${MRB_SOURCE}
checkoutcmd = mdir=`echo $module | tr - _` && mrb g -r -d $mdir -b `match_args $module "$LAR_REVISION,*@develop"` $module

_report_checkoutdir = ${MRB_SOURCE}
_report_checkoutcmd = mdir=`echo $module | tr - _` && (cd $mdir && module_repourl_git $module)

# build:
buildsetup  = echo ==========; mrbsetenv ; echo ==========; setup ninja v1_6_0a;  sed -iorigin "/std::string path/s/$/ path.append(\"\/\");/" ${MRB_SOURCE}/larsim/larsim/EventGenerator/CORSIKA/CORSIKAGen_module.cc
builddir    = ${MRB_BUILDDIR}
#buildcmd    = mrb uv larsoft citest &&  mrb uv larreco citest &&  mrbsetenv && mrb b -j `getconf _NPROCESSORS_ONLN` --generator ninja
buildcmd    = mrbsetenv && mrb b -j `getconf _NPROCESSORS_ONLN` --generator ninja
#buildcmd    = mrbsetenv; ups active; echo -e "#######\n\n"; export IFDH_DEBUG=1; unsetup ifdhc; unsetup ifdh_platform_pkgs; setup ifdhc b2_0_0; ups active; echo -e "#######\n\n"; unsetup ifdh_platform_pkgs; setup ifdh_platform_pkgs v0_3; which ifdh_platform_pkgs; ups active; echo -e "#######\n\n"; ifdh ls /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/p_showers_\*; echo -e "@@@@@@@\n\n"; cp -v /grid/fermiapp/products/common/prd/ifdhc_config/b2_0_0/NULL/ifdh.cfg ifdh.cfg.old; export IFDHC_CONFIG_DIR=$PWD; ls -lhv $IFDHC_CONFIG_DIR/ifdh.cfg.old;  grep -v "# lss_cmd=" ifdh.cfg.old > ifdh.cfg; ls -lv $IFDHC_CONFIG_DIR/ifdh.cfg; diff ifdh.cfg ifdh.cfg.old; echo "IFDHC_CONFIG_DIR: $IFDHC_CONFIG_DIR"; ifdh ls /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/p_showers_\*; echo -e "@@@@@@@\n\n"; globus-url-copy -list gsiftp://fndca1.fnal.gov/pnfs/fnal.gov/usr/uboone/persistent/users/mibass/corsika/sqShowers/p_showers_*

#buildcmd    = mrbsetenv; if uname -a | grep Darwin ; then unsetup ifdh_platform_pkgs; setup ifdh_platform_pkgs v0_3; fi; ups active; export IFDH_DEBUG=1; ifdh ls /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/p_showers_\*; unsetup ifdhc; setup ifdhc b2_0_2; ups active; ifdh ls /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/p_showers_\*; globus-url-copy -v -vb -dbg -c -list gsiftp://fndca1.fnal.gov/pnfs/fnal.gov/usr/uboone/persistent/users/mibass/corsika/sqShowers/p_showers_\*; mrb b -j `getconf _NPROCESSORS_ONLN` --generator ninja

#buildcmd    = mrbsetenv; ups active; unsetup ifdhc; setup ifdhc v1_8_11; ups active ; mrb b -j `getconf _NPROCESSORS_ONLN` --generator ninja

# unit_test:
# for the moment, we ignore failures so we can test the ci phase on MacOS
unit_testdir     = ${MRB_BUILDDIR}
#unit_testcmd     = mrb test --sc  -j`getconf _NPROCESSORS_ONLN` --generator ninja
unit_testcmd     = mrb test --sc  -j`getconf _NPROCESSORS_ONLN` --generator ninja
unit_testreport  = sed -n -e "/%/,\$p" $f

# install:
installdir     = ${MRB_TOP}
installcmd     = mrb i --sc --generator ninja

# ci_tests:
ci_testsdir    = ${MRB_TOP}
#ci_testssetup  = mrbslp ; export IFDH_DEBUG=1; test -n "$SETUP_IFDHC" || setup ifdhc -z /cvmfs/fermilab.opensciencegrid.org/products/common/db:$PRODUCTS
ci_testssetup  = mrbslp ; export IFDH_DEBUG=1; unsetup ifdhc_config; setup ifdhc_config v2_0_0 -z  /grid/fermiapp/products/common/db; ups active
ci_testscmd    = ups active; test_runner -v --statistics ${LAR_TESTS:-default}
ci_testsreport = p="Test|Start|passed.*out.of|error:|ERROR:|FAILED:" ; cat $f | egrep "$p" | tail -n 150

# ifdh_test:
ifdh_testdir    = ${MRB_TOP}
ifdh_testsetup  = echo "X509_USER_PROXY: $X509_USER_PROXY"; id; ls -lh $X509_USER_PROXY; export X509_CERT_DIR=/cvmfs/oasis.opensciencegrid.org/mis/certificates/
ifdh_testcmd    = setup ifdhc; ups active; voms-proxy-info -dont-verify-ac -all; echo export IFDH_DEBUG=1; echo -e "\nifdh findMatchingFiles /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/ p_showers_\*\n"; ifdh findMatchingFiles /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/ p_showers_\*; unsetup ifdh_platform_pkgs; unsetup ifdhc; ups active; echo setup ifdhc b2_0_3; setup ifdhc b2_0_3; ups active; export X509_CERT_DIR=/cvmfs/oasis.opensciencegrid.org/mis/certificates/; echo -e "\nifdh ls /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/*\n"; ifdh ls /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/*; echo -e "\nifdh ls /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/p_showers_\*\n"; ifdh ls /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/p_showers_\*; echo -e "\nifdh ls /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/p_showers_039040.db\n"; ifdh ls /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/p_showers_039040.db; echo -e "\nifdh findMatchingFiles /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/ p_showers_\*\n"; ifdh findMatchingFiles /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/ p_showers_\*; echo -e "\nifdh findMatchingFiles /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/ p_showers_*\n"; ifdh findMatchingFiles /pnfs/uboone/persistent/users/mibass/corsika/sqShowers/ p_showers_*
#ifdh_testreport = p="Test|Start|passed.*out.of|error:|ERROR:|FAILED:" ; cat $f | egrep "$p" | tail -n 150

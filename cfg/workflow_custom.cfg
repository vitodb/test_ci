# main config lists section to get personalty from
[default]
workflow                  = ${LAR_WORKFLOW:-defaultwf}
notify_email_to           = vito@fnal.gov,mfattoru@fnal.gov
notify_succeeded_email_to = vito@fnal.gov,mfattoru@fnal.gov
notify_success            = false
notify_warning_email_to   = vito@fnal.gov,mfattoru@fnal.gov
notify_failed_email_to    = vito@fnal.gov,mfattoru@fnal.gov
notify_blame              = true
proxy_vo                  = /fermilab/uboone
# build_db_uri              = http://dbweb6.fnal.gov:8080/LarCI/app
build_db_uri              = http://dbweb6.fnal.gov:8080/TestCI/app
report_logs_extra         =


### workflows ###
[custom]
experiment    = LArSoftTest
qualifier     = ${LAR_QUALS:-e14:prof}
ci_test_lists = quick_test_dunetpc quick_test_lariatsoft quick_test_argoneutcode
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install
modules       = larexamples

[larsoft]
experiment  = LArSoft
qualifier   = ${LAR_QUALS:-e14:prof}
personality = mrb
proxy_flag  = false
phases      = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install
modules     = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft larsoftobj larwirecell


[defaultwf]
experiment    = LArSoft uBooNE DUNE LArIAT ArgoNeuT
qualifier     = ${LAR_QUALS:-e14:prof}
ci_test_lists = quick_test_uboonecode quick_test_dunetpc quick_test_lariatsoft quick_test_argoneutcode
#ci_test_lists = seq_test_uboonecode seq_test_dunetpc seq_test_lariatsoft seq_test_argoneutcode
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft larsoftobj larwirecell ubutil uboonecode duneutil dunetpc lariatutil lariatsoft argoneutcode


[uboonecode]
experiment    = LArSoft uBooNE
qualifier     = ${LAR_QUALS:-e14:prof}
ci_test_lists = quick_test_uboonecode
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft larsoftobj larwirecell ubutil uboonecode


[uboonecodestandalone]
experiment    = uBooNE
qualifier     = ${LAR_QUALS:-e14:prof}
ci_test_lists = quick_test_uboonecode
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = ubutil uboonecode


[dunetpc]
experiment    = LArSoft DUNE
qualifier     = ${LAR_QUALS:-e14:prof}
ci_test_lists = quick_test_dunetpc
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft larsoftobj larwirecell duneutil dunetpc


[dunetpcstandalone]
experiment    = DUNE
qualifier     = ${LAR_QUALS:-e14:prof}
ci_test_lists = quick_test_dunetpc
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = duneutil dunetpc


[lariatsoft]
experiment    = LArSoft LArIAT
qualifier     = ${LAR_QUALS:-e14:prof}
ci_test_lists = quick_test_lariatsoft
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft larsoftobj larwirecell lariatutil lariatsoft


[lariatsoftstandalone]
experiment    = LArIAT
qualifier     = ${LAR_QUALS:-e14:prof}
ci_test_lists = quick_test_lariatsoft
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = lariatutil lariatsoft


[argoneutcode]
experiment    = LArSoft ArgoNeuT
qualifier     = ${LAR_QUALS:-e14:prof}
ci_test_lists = quick_test_argoneutcode
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft larsoftobj larwirecell argoneutcode


[argoneutcodestandalone]
experiment    = ArgoNeuT
qualifier     = ${LAR_QUALS:-e14:prof}
ci_test_lists = quick_test_argoneutcode
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
modules       = argoneutcode

[Update_ref_files_DUNETPC]
experiment      = LArSoft DUNE
qualifier       = ${LAR_QUALS:-e14:prof}
revision        = ${LAR_REVISION:-develop}
ci_test_lists   = quick_test_dunetpc
gen_ref_ci_test = seq_test_dunetpc
personality     = mrb
proxy_flag      = true
phases          = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install gen_ref_files ci_tests rename_ref_files
skip_phases     = gen_ref_files@d14 gen_ref_files@d15 rename_ref_files@d14 rename_ref_files@d15
modules         = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft larsoftobj larwirecell duneutil dunetpc
ci_exp_code     = DUNETPC

[Update_ref_files_DUNETPC_standalone]
experiment      = DUNE
qualifier       = ${LAR_QUALS:-e14:prof}
revision        = ${LAR_REVISION:-develop}
ci_test_lists   = quick_test_dunetpc
gen_ref_ci_test = seq_test_dunetpc
personality     = mrb
proxy_flag      = true
phases          = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install gen_ref_files ci_tests rename_ref_files
skip_phases     = gen_ref_files@d14 gen_ref_files@d15 rename_ref_files@d14 rename_ref_files@d15
modules         = duneutil dunetpc
ci_exp_code     = DUNETPC

[Update_ref_files_UBOONE]
experiment      = LArSoft uBooNE
qualifier       = ${LAR_QUALS:-e14:prof}
revision        = ${LAR_REVISION:-develop}
ci_test_lists   = quick_test_uboonecode
gen_ref_ci_test = seq_test_uboonecode
personality     = mrb
proxy_flag      = true
phases          = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install gen_ref_files ci_tests rename_ref_files
skip_phases     = gen_ref_files@d14 gen_ref_files@d15 rename_ref_files@d14 rename_ref_files@d15
modules         = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft larsoftobj larwirecell ubutil uboonecode
ci_exp_code     = UBOONECODE

[Update_ref_files_UBOONE_standalone]
experiment      = uBooNE
qualifier       = ${LAR_QUALS:-e14:prof}
revision        = ${LAR_REVISION:-develop}
ci_test_lists   = quick_test_uboonecode
gen_ref_ci_test = seq_test_uboonecode
personality     = mrb
proxy_flag      = true
phases          = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install gen_ref_files ci_tests rename_ref_files
skip_phases     = gen_ref_files@d14 gen_ref_files@d15 rename_ref_files@d14 rename_ref_files@d15
modules         = ubutil uboonecode
ci_exp_code     = UBOONECODE

[Update_ref_files_ARGONEUT]
experiment      = LArSoft ArgoNeuT
qualifier       = ${LAR_QUALS:-e14:prof}
revision        = ${LAR_REVISION:-develop}
ci_test_lists   = quick_test_argoneutcode
gen_ref_ci_test = seq_test_argoneutcode
personality     = mrb
proxy_flag      = true
phases          = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install gen_ref_files ci_tests rename_ref_files
skip_phases     = gen_ref_files@d14 gen_ref_files@d15 rename_ref_files@d14 rename_ref_files@d15
modules         = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft larsoftobj larwirecell argoneutcode
ci_exp_code     = ARGONEUTCODE

[Update_ref_files_ARGONEUT_standalone]
experiment      = ArgoNeuT
qualifier       = ${LAR_QUALS:-e14:prof}
revision        = ${LAR_REVISION:-develop}
ci_test_lists   = quick_test_argoneutcode
gen_ref_ci_test = seq_test_argoneutcode
personality     = mrb
proxy_flag      = true
phases          = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install gen_ref_files ci_tests rename_ref_files
skip_phases     = gen_ref_files@d14 gen_ref_files@d15 rename_ref_files@d14 rename_ref_files@d15
modules         = argoneutcode
ci_exp_code     = ARGONEUTCODE

[Update_ref_files_LARIAT]
experiment      = LArSoft LArIAT
qualifier       = ${LAR_QUALS:-e14:prof}
revision        = ${LAR_REVISION:-develop}
ci_test_lists   = quick_test_lariatsoft
gen_ref_ci_test = seq_test_lariatsoft
personality     = mrb
proxy_flag      = true
phases          = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install gen_ref_files ci_tests rename_ref_files
skip_phases     = gen_ref_files@d14 gen_ref_files@d15 rename_ref_files@d14 rename_ref_files@d15
modules         = larana larcore larcoreobj lardata lardataobj lareventdisplay larevt larexamples larpandora larpandoracontent larreco larsim larsoft larsoftobj larwirecell lariatutil lariatsoft
ci_exp_code     = LARIATSOFT

[Update_ref_files_LARIAT_standalone]
experiment      = LArIAT
qualifier       = ${LAR_QUALS:-e14:prof}
revision        = ${LAR_REVISION:-develop}
ci_test_lists   = quick_test_lariatsoft
gen_ref_ci_test = seq_test_lariatsoft
personality     = mrb
proxy_flag      = true
phases          = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install gen_ref_files ci_tests rename_ref_files
skip_phases     = gen_ref_files@d14 gen_ref_files@d15 rename_ref_files@d14 rename_ref_files@d15
modules         = lariatutil lariatsoft
ci_exp_code     = LARIATSOFT

[CI_TESTS_GRID_UBOONE]
experiment    = uBooNE
qualifier     = ${LAR_QUALS:-e14:prof}
revision      = ${LAR_REVISION:-develop}
ci_test_lists = quick_test_uboonecode
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests _tar_code ci_tests_grid
skip_phases   = _tar_code@d14 _tar_code@d15 ci_tests_grid@d14 ci_tests_grid@d15
grid_cfg      = ${LAR_GRIDWFCFG:-cfg/grid_workflow.cfg}
modules       = uboonecode

[CI_TESTS_GRID_UBOONE_FAST]
experiment    = uBooNE
qualifier     = ${LAR_QUALS:-e14:prof}
revision      = ${LAR_REVISION:-develop}
ci_test_lists = quick_test_uboonecode
personality   = mrb
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests _tar_code ci_tests_grid
skip_phases   = _tar_code@d14 _tar_code@d15 ci_tests_grid@d14 ci_tests_grid@d15 unit_test@slf6 ci_tests@slf6
grid_cfg      = ${LAR_GRIDWFCFG:-cfg/grid_workflow.cfg}
modules       = uboonecode

[CI_TESTS_GRID_UBOONE_RECOVERY]
experiment    = uBooNE
qualifier     = ${LAR_QUALS:-e14:prof}
revision      = ${LAR_REVISION:-develop}
#ci_test_lists = quick_test_uboonecode
personality   = mrb
proxy_flag    = true
phases        = _recovery_n ci_tests_grid
skip_phases   = *@d14 *@d15
grid_cfg      = ${LAR_GRIDWFCFG:-cfg/grid_workflow.cfg}
#modules       = uboonecode

[test_newwf]
# experiment          = LArSoft ArgoNeuT DUNE LArIAT uBooNE
qualifier      = ${LAR_QUALS:-e14:prof}
# ci_test_lists  = quick_test_dunetpc
personality    = mrb_newwf
proxy_flag     = true
# skip_phases    = *@d14
additional_workflow = LArSoft@Test2@workflow_LArSoft.cfg,ArgoNeuT@Test2@workflow_ArgoNeuT.cfg,DUNE@Test2@workflow_DUNE.cfg,LArIAT@Test2@workflow_LArIAT.cfg,uBooNE@Test2@workflow_uBooNE.cfg
# phases         = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
# phases         = _evalLArSoft_n checkoutLArSoft_x_LArSoftmodules _report_checkoutLArSoft_x_LArSoftmodules buildLArSoft unit_testLArSoft installLArSoft _evalDUNE_n checkoutDUNE_x_DUNEmodules _report_checkoutDUNE_x_DUNEmodules buildDUNE unit_testDUNE installDUNE ci_testsDUNE
# phasesSequence = phasesLArSoft SERIAL ( phasesDUNE ) PARALLEL ( phasesLArIAT ) PARALLEL ( phasesArgoNeuT )
phasesSequence = phasesLArSoft SERIAL ( phasesuBooNE ) PARALLEL ( phasesDUNE ) PARALLEL ( phasesLArIAT ) PARALLEL ( phasesArgoNeuT )

[test_grid_newwf]
# experiment     = uBooNE
qualifier      = ${LAR_QUALS:-e14:prof}
# ci_test_lists  = quick_test_dunetpc
personality    = mrb_newwf
proxy_flag     = true
skip_phases    = unit_testuBooNE@slf6 _tar_codeuBooNE@d14 ci_tests_griduBooNE@d14
# additional_workflow = LArSoft@Test2@workflow_LArSoft.cfg,ArgoNeuT@Test2@workflow_ArgoNeuT.cfg,DUNE@Test2@workflow_DUNE.cfg,LArIAT@Test2@workflow_LArIAT.cfg,uBooNE@Test2@workflow_uBooNE.cfg
additional_workflow = uBooNE@CI_TESTS_GRID_UBOONE@workflow_uBooNE.cfg
# phases         = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install ci_tests
# phases         = _evalLArSoft_n checkoutLArSoft_x_LArSoftmodules _report_checkoutLArSoft_x_LArSoftmodules buildLArSoft unit_testLArSoft installLArSoft _evalDUNE_n checkoutDUNE_x_DUNEmodules _report_checkoutDUNE_x_DUNEmodules buildDUNE unit_testDUNE installDUNE ci_testsDUNE
# phasesSequence = phasesLArSoft SERIAL ( phasesDUNE ) PARALLEL ( phasesLArIAT ) PARALLEL ( phasesArgoNeuT )
phasesSequence = phasesuBooNE


### personalities ###

[mrb]
# define what the stages, below, do:
# eval_n:
_eval1 = source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh || source /grid/fermiapp/products/dune/setup_dune.sh; export PRODUCTS=${PRODUCTS}:/grid/fermiapp/products/common/db:/grid/fermiapp/products/lariat:/grid/fermiapp/products/argoneut
_eval2 = source `ups setup ups`
_eval3 = PRODUCTS=`dropit -D -E -p $PRODUCTS:/grid/fermiapp/products/uboone:/cvmfs/oasis.opensciencegrid.org/microboone/products:/cvmfs/uboone.opensciencegrid.org/products`
_eval4 = LAR_QUALS="${qualifier}"; if uname -a | grep Darwin ; then  modules="${modules//lariatsoft/lariatsoft lariatfragments}"; fi
_eval5 = `mrb newDev -f -v ${proj_PREFIX}_ci -q $LAR_QUALS | grep source`
_eval6 = source ${MRB_DIR}/bin/mrbSetEnv
#_eval7 = export temporary_build_identifier=$( echo -`date +%Y%m%d%H%M` ) ; export build_platform=$( echo -`platform` )
_eval7 = export temporary_build_identifier=$( echo -`date +%Y%m%d%H%M` )
_eval8 = echo "temporary_build_identifier: ${temporary_build_identifier} build_platform: ${build_platform}"

# checkout_x_modules does this for each $module in $modules
checkoutdir  = ${MRB_SOURCE}
checkoutcmd  = mdir=`echo $module | tr - _` && mrb g -r -d $mdir -b `match_args $module "$LAR_REVISION,*@develop"` $module
checkoutsort = alphabetic

# report_checkout:
_report_checkoutdir = ${MRB_SOURCE}
_report_checkoutcmd = mdir=`echo $module | tr - _` && (cd $mdir && module_repourl_git $module)

# build:
buildsetup  = echo "PRODUCTS: ${PRODUCTS}"; ups active; echo ==========; mrbsetenv ; echo ==========; setup ninja v1_6_0b; if uname -a | grep Darwin ; then sed -iorigin "/std::string path/s/$/ path.append(\"\/\");/" ${MRB_SOURCE}/larsim/larsim/EventGenerator/CORSIKA/CORSIKAGen_module.cc ; fi
builddir    = ${MRB_BUILDDIR}
buildcmd    = mrbsetenv && mrb b -j `getconf _NPROCESSORS_ONLN` --generator ninja

# unit_test:
unit_testdir     = ${MRB_BUILDDIR}
unit_testcmd     = mrb test --sc  -j`getconf _NPROCESSORS_ONLN` --generator ninja
unit_testreport  = sed -n -e "/%/,\$p" $f
unit_testsort    = status

# install:
installdir     = ${MRB_TOP}
installcmd     = mrb i --sc --generator ninja

# count_citests:
_count_citestsdir   = ${MRB_TOP}
_count_citestssetup = mrbslp
_count_citestscmd   = echo -e "List of available CI tests:\n`test_runner -l`" ; echo "#Available-CI-tests: "`test_runner -l | grep -Ev "^suite |Tests in no suites|The current parallel limit is:" | sort | uniq | wc -l`

# count_running_citests:
_count_running_citestsdir   = ${MRB_TOP}
_count_running_citestssetup = mrbslp
_count_running_citestscmd   = echo -e "List of running CI tests:\n`test_runner -e ${LAR_TESTS:-default}`" ; echo "#Running-CI-tests: `test_runner -C ${LAR_TESTS:-default} | grep -v \"The current parallel limit is:\"`"

# gen_ref_files:
gen_ref_filesdir   = ${MRB_TOP}
gen_ref_filessetup = export build_identifier=${temporary_build_identifier}; echo "build_identifier: ${build_identifier}"; mrbslp
gen_ref_filescmd   = test_runner -v -s --parallel-limit `getconf _NPROCESSORS_ONLN` -u ${gen_ref_ci_test}
gen_ref_filessort  = status

# ci_tests:
ci_testsdir    = ${MRB_TOP}
ci_testssetup  = rm -rf $(test_runner -e ${LAR_TESTS:-default}); mrbslp ; export IFDH_DEBUG=1
ci_testscmd    = ups active; test_runner -v -s --parallel-limit `getconf _NPROCESSORS_ONLN` ${LAR_TESTS:-default}
ci_testsreport = p="Test|Start|passed.*out.of|error:|ERROR:|FAILED:" ; cat $f | egrep "$p" | tail -n 150
ci_testssort  = status

# rename_ref_files:
rename_ref_filesdir    = ${MRB_TOP}
rename_ref_filescmd    = rename_reference_files

# tar_code
_tar_codedir  = ${WORKSPACE}
_tar_codecmd  = moduleVers=`match_args uboonecode "${LAR_REVISION//\//_}"` && /usr/bin/time tar zcf uboonecode.${moduleVers:-develop}.${LAR_QUALS//:/_}.tar.gz -C ${MRB_TOP} $(basename ${MRB_TOP}/localProducts_*) &&  /usr/bin/time tar zcf ci_modules.tar.gz -C ${WORKSPACE} generic_ci ${proj_PREFIX}_ci

# _recovery_n:
_recovery1 = LAR_QUALS="${qualifier}";
_recovery2 = export CI_RECOVERY_MODE=--recovery
_recovery3 = /usr/bin/time tar zcf ci_modules.tar.gz -C ${WORKSPACE} generic_ci ${proj_PREFIX}_ci

# ci_tests_grid
ci_tests_griddir    = ${WORKSPACE}
ci_tests_gridsetup  = echo -e "\n\n"; myproxy-info -s myproxy.fnal.gov -vd
ci_tests_gridcmd    = moduleVers=`match_args uboonecode "${LAR_REVISION//\//_}"` && submit_jobs.sh ${CI_RECOVERY_MODE} --group uboone --role Analysis --code-tarball uboonecode.${moduleVers:-develop}.${LAR_QUALS//:/_}.tar.gz --ci-tarball ci_modules.tar.gz
ci_tests_gridreport = sed  -e "/Submitting grid jobs/p ; 1,/Submitting grid jobs/d" $f
ci_tests_gridsort   = id

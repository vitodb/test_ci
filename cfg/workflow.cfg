# main config lists section to get personalty from
[default]
workflow          = ${TEST_WORKFLOW:-TEST_CI_MRB}
notify_email      = vito@fnal.gov,mfattoru@fnal.gov
notify_success    = true
notify_blame      = false
proxy_vo          = /fermilab/uboone
email_extra       =
build_db_uri      = http://dbweb6.fnal.gov:8080/TestCI/app
report_logs_extra =



### workflows ###
[TEST_CI_MRB]
experiment    = DUNE
qualifier     = ${TEST_QUALS:-e10:prof}
revision      = ${TEST_REVISION:-develop}
ci_test_lists = quick_test_dunetpc
personality   = MRB
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install _count_citests _count_running_citests ci_tests
skip_phases   = PhaseToSkip@d14 PhaseToSkip@d15
modules       = dunetpc

[NOvA_CI_SRT]
experiment    = NOvA
qualifier     = ${NOVA_QUALS:-maxopt}
ci_test_lists = default
personality   = SRTsvn
proxy_flag    = true
phases        = _eval_n checkout _report_checkout build _count_citests _count_running_citests ci_tests


### personalities ###
[MRB]
# define what the stages, below, do:
# eval_n:
_eval1 = source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh || source /grid/fermiapp/products/dune/setup_dune.sh
_eval2 = . `ups setup ups`
_eval4 = TEST_QUALS="${qualifier}"
_eval5 = `mrb newDev -f -v ${proj_PREFIX}_ci -q $TEST_QUALS | grep source`
_eval6 = source ${MRB_DIR}/bin/mrbSetEnv


# checkout_x_modules does this for each $module in $modules
checkoutdir = ${MRB_SOURCE}
checkoutcmd = mdir=`echo $module | tr - _` && mrb g -r -d $mdir -b `match_args $module "$TEST_REVISION,*@develop"` $module


# report_checkout:
_report_checkoutdir = ${MRB_SOURCE}
_report_checkoutcmd = mdir=`echo $module | tr - _` && (cd $mdir && module_repourl_git $module)


# build:
buildsetup  = echo ==========; mrbsetenv ; echo ==========; setup ninja v1_6_0a
builddir    = ${MRB_BUILDDIR}
buildcmd    = mrbsetenv && mrb b -j `getconf _NPROCESSORS_ONLN` --generator ninja


# unit_test:
# for the moment, we ignore failures so we can test the ci phase on MacOS
unit_testdir     = ${MRB_BUILDDIR}
unit_testcmd     = mrb test --sc  -j`getconf _NPROCESSORS_ONLN` --generator ninja
unit_testreport  = sed -n -e "/%/,\$p" $f

# install:
installdir     = ${MRB_TOP}
installcmd     = mrb i --sc --generator ninja

# count_citests:
_count_citestsdir   = ${MRB_TOP}
_count_citestssetup = mrbslp
_count_citestscmd   = echo -e "List of available CI tests:\n`test_runner -l`" ; echo "#Available-CI-tests: "`test_runner -l | grep -Ev "^suite |Tests in no suites" | sort | uniq | wc -l`


# count_running_citests:
_count_running_citestsdir   = ${MRB_TOP}
_count_running_citestssetup = mrbslp
_count_running_citestscmd   = echo -e "List of running CI tests:\n`test_runner -e ${TEST_TESTS:-default}`" ; echo "#Running-CI-tests: `test_runner -C ${TEST_TESTS:-default}`"


# ci_tests:
ci_testsdir    = ${MRB_TOP}
ci_testssetup  = mrbslp
ci_testscmd    = test_runner -v --statistics ${TEST_TESTS:-default}
ci_testsreport = p="Test|Start|passed.*out.of|error:|ERROR:|FAILED:" ; cat $f | egrep "$p" | tail -n 150


[SRTsvn]
# define what the phases, below, do:

# eval_n:
_eval1 =  wget https://cdcvs.fnal.gov/redmine/projects/novaart/repository/raw/trunk/SRT_NOVA/scripts/nova_srt_bootstrap &&  chmod +x nova_srt_bootstrap
_eval2 = ./nova_srt_bootstrap ${WORKSPACE}
_eval3 = source ${WORKSPACE}/srt/srt.sh
_eval4 = NOVA_QUALS="${qualifier}"


# checkout_x_modules: does this for each $module in $modules
checkoutdir = ${WORKSPACE}
checkoutcmd = moduleVers=`match_args novaart.pkgs.svn "$NOVA_REVISION"` && wget https://cdcvs.fnal.gov/redmine/projects/novaart/repository/raw/trunk/SRT_NOVA/scripts/update-release && chmod +x update-release && ./update-release -rel ${moduleVers:-development} && cd ${WORKSPACE}/setup/ && svn update


# report_checkout:
_report_checkoutdir = ${WORKSPACE}/releases
_report_checkoutcmd = moduleVers=`match_args novaart.pkgs.svn "$NOVA_REVISION"` && cd ${moduleVers:-development} && module_repourl_svn novaart.pkgs.svn


# build:
buildsetup  = moduleVers=`match_args novaart.pkgs.svn "$NOVA_REVISION"` && source ${WORKSPACE}/setup/setup_nova.sh -r ${moduleVers:-development} -b "${NOVA_QUALS}" -6 "${WORKSPACE}" -e "/cvmfs/nova.opensciencegrid.org/externals:/grid/fermiapp/products/common/db:/grid/fermiapp/products/nova/externals"
builddir    = ${WORKSPACE}
buildcmd    = ${SRT_PUBLIC_CONTEXT}/SRT_NOVA/scripts/novasoft_build -rel ${moduleVers:-development} -p `getconf _NPROCESSORS_ONLN` -failonerror


# unit_test:
unit_testdir     = ${WORKSPACE}
# unit_testcmd     =


# install:
installdir     = ${WORKSPACE}
# installcmd     =


# count_citests:
_count_citestsdir   = ${WORKSPACE}
#_count_citestssetup =
_count_citestscmd   = echo -e "List of available CI tests:\n`test_runner -l`" ; echo "#Available CI tests: "`test_runner -l | grep -Ev "^suite |Tests in no suites" | sort | uniq | wc -l`


# count_running_citests:
_count_running_citestsdir   = ${WORKSPACE}
#_count_running_citestssetup =
_count_running_citestscmd   = echo -e "List of running CI tests:\n`test_runner -e ${NOVA_TESTS:-default}`" ; echo "#Running CI tests: `test_runner -C ${NOVA_TESTS:-default}`"


# ci_tests:
ci_testsdir   = ${WORKSPACE}
#ci_testssetup =
ci_testscmd   = test_runner -v --statistics ${NOVA_TESTS:-default}
ci_testsreport  = p="Test|Start|passed.*out.of|error:|ERROR:|FAILED:" ; cat $f | egrep "$p" | tail -n 150

# main config lists section to get personalty from
[default]
workflow                 = ${TEST_WORKFLOW:-TEST_CI_MRB}
notify_email_to          = vito@fnal.gov,mfattoru@fnal.gov
notify_succeded_email_to =
notify_failed_email_to   =
notify_success           = new
notify_blame             = false
email_summary            =
email_extra              = $(cat ${BUILD_NUMBER}/mail.results)
build_db_uri             = http://dbweb6.fnal.gov:8080/TestCI/app
report_logs_extra =



### workflows ###
[GlideinWMS]
experiment    = GlideinWMS
qualifier     = ${TEST_QUALS:-none}
revision      = ${TEST_REVISION:-develop}
#ci_test_lists = quick_test_dunetpc
personality   = standard
phases        = checkout_x_modules _report_checkout_x_modules _pylint_prepare_n pylint unit_test
modules       = glideinwms


### personalities ###
[standard]
# define what the phases, below, do:

# checkout_x_modules does this for each $module in $modules
checkoutdir = ${WORKSPACE}
checkoutcmd = git clone http://cdcvs.fnal.gov/projects/$module && cd $module && git checkout branch_v3_2_jenkins

# report_checkout:
_report_checkoutdir = ${WORKSPACE}/$module
_report_checkoutcmd = mdir=`echo $module | tr - _` && (cd $mdir && module_repourl_git $module)

# _pylint_prepare_n:
_pylint_prepare1 = check_br="branch_v3_2 branch_v3_2_jenkins master"
_pylint_prepare2 = branches=`cd ${WORKSPACE}/glideinwms; git log --all --oneline --since="1 weeks ago" --pretty=format:%d | sort | uniq | grep origin | tr -d "(" | tr -d ")"`
_pylint_prepare3 = for b in $branches; do br=`echo $b | grep origin | grep -v HEAD | tr -d "," | sed -e "s|origin/||g"`; [ -n $br ] && check_br="$check_br $br"; done
_pylint_prepare4 = branch_list=`echo $check_br | xargs -n1 | sort -u | xargs | tr " " ","`
_pylint_prepare5 = echo "branch_list: ${branch_list}"

# pylint:
pylintsetup  = echo "branch_list: ${branch_list}" && GLIDEINWMS_SRC=${WORKSPACE}/glideinwms
pylintdir    = ${WORKSPACE}
pylintcmd    = $GLIDEINWMS_SRC/build/jenkins/run_pylint.sh $branch_list
pylintreport =  sed -n "/---/,/---/p ; /===/,/===/p ; /Switched/p" $f
#pylintreport = p="GIT_BRANCH|GIT_CHECKOUT|FILES_CHECKED|FILES_CHECKED_COUNT|PYLINT_ERROR_FILES_COUNT|PYLINT_ERROR_COUNT|PEP8_ERROR_COUNT" ; cat $f | egrep "$p"

# unit_test:
unit_testsetup  = GLIDEINWMS_SRC=${WORKSPACE}/glideinwms; GIT_DIR=$GLIDEINWMS_SRC/.git git checkout master
unit_testdir    = ${WORKSPACE}
unit_testcmd    = $GLIDEINWMS_SRC/build/jenkins/run_unittests.sh test_frontend.py test_frontend_element.py test_cleanupSupport.py test_condorExe.py test_encodingSupport.py test_glideFactoryDowntimeLib.py test_glideinFrontendPlugins.py test_tarSupport.py test_logSupport.py 2>&1
#unit_testreport =

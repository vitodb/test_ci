# main config lists section to get personalty from
[default]
workflow                  = ${TEST_WORKFLOW:-TEST_CI_MRB}
#notify_email_to          = vito@fnal.gov
notify_succeeded_email_to = vito@fnal.gov
notify_success            = true
notify_warning_email_to   = vito@fnal.gov
notify_failed_email_to    = vito@fnal.gov
notify_blame              = false
proxy_vo                  = /fermilab/uboone
build_db_uri              = http://dbweb6.fnal.gov:8080/TestCI/app
#report_logs_extra =
#email_extra       = Experiment: ${CI_EXPERIMENT}<br>DUNE version: ${TEST_REVISION:-develop}<br>Build type: ${TEST_QUALS}<br>Platform: `platform`<br>Workflow: ${WORKFLOW}<br>Jenkins project: ${JOB_NAME//\/*}, build ${BUILD_NUMBER}<br>Build slave: `hostname`<br>Trigger: ${TRIGGER_REASON}<br>For more details about this CI build status and to access the logs, please, see <a href="${build_db_uri}/view_builds/index?start=${BUILD_NUMBER}">the web monitoring application</a>.<br>To access more logs see the <a href="$BUILD_URL">Jenkins project</a> web page.<br>



### workflows ###
[TEST_CI_MRB]
experiment    = DUNE
qualifier     = ${TEST_QUALS:-e10:prof}
revision      = ${TEST_REVISION:-develop}
ci_test_lists = quick_test_dunetpc
personality   = MRB
proxy_flag    = true
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install _count_citests _count_running_citests ci_tests
modules       = duneutil dunetpc


[TEST_CI_MRB_GRID]
experiment    = DUNE
qualifier     = ${TEST_QUALS:-e10:prof}
revision      = ${TEST_REVISION:-develop}
ci_test_lists = quick_test_dunetpc
personality   = MRB
#proxy_flag    = true
proxy_flag    = false
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install _count_citests _count_running_citests ci_tests _tar_code ci_tests_grid
skip_phases   = ci_tests@d14 _tar_code@d14 ci_tests_grid@d14 ci_tests@d15 _tar_code@d15 ci_tests_grid@d15 ci_tests@slf6
grid_cfg      = cfg/grid_workflow.cfg
modules       = dunetpc


[TEST_CI_MRB_GRID_UBOONE]
experiment    = uBooNE
qualifier     = ${TEST_QUALS:-e10:prof}
revision      = ${TEST_REVISION:-develop}
ci_test_lists = quick_test_uboonecode
personality   = MRB_UBOONE
#proxy_flag    = true
proxy_flag    = false
phases        = _eval_n checkout_x_modules _report_checkout_x_modules build unit_test install _count_citests _count_running_citests ci_tests _tar_code ci_tests_grid
skip_phases   = ci_tests@d14 _tar_code@d14 ci_tests_grid@d14 ci_tests@d15 _tar_code@d15 ci_tests_grid@d15 unit_test@slf6 ci_tests@slf6
grid_cfg      = cfg/grid_workflow.cfg
modules       = uboonecode


[TEST_CI_MRB_GRID_UBOONE_LIGHT]
experiment    = uBooNE
qualifier     = ${TEST_QUALS:-e10:prof}
revision      = ${TEST_REVISION:-develop}
ci_test_lists = quick_test_uboonecode
personality   = MRB_UBOONE
#proxy_flag    = true
proxy_flag    = false
phases        = _eval_n ci_tests_grid_light
skip_phases   = ci_tests@d14 _tar_code@d14 ci_tests_grid@d14 ci_tests_grid_light@d14 ci_tests@d15 _tar_code@d15 ci_tests_grid@d15 ci_tests_grid_light@d15 unit_test@slf6 ci_tests@slf6
grid_cfg      = cfg/grid_workflow.cfg
modules       = uboonecode


### personalities ###
[MRB]
# define what the stages, below, do:
# eval_n:
_eval1 = source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh || source /grid/fermiapp/products/dune/setup_dune.sh
_eval2 = . `ups setup ups`
_eval4 = TEST_QUALS="${qualifier}"
_eval5 = `mrb newDev -f -v ${proj_PREFIX}_ci -q $TEST_QUALS | grep source`
_eval6 = source ${MRB_DIR}/bin/mrbSetEnv
_eval7 = export IFDH_CP_MAXRETRIES=1


# checkout_x_modules does this for each $module in $modules
checkoutdir = ${MRB_SOURCE}
checkoutcmd = mdir=`echo $module | tr - _` && mrb g -r -d $mdir -b `match_args $module "$TEST_REVISION,*@develop"` $module


# report_checkout:
_report_checkoutdir = ${MRB_SOURCE}
_report_checkoutcmd = mdir=`echo $module | tr - _` && (cd $mdir && module_repourl_git $module)


# build:
buildsetup  = echo ==========; mrbsetenv ; echo ==========; setup ninja v1_6_0a
builddir    = ${MRB_BUILDDIR}
buildcmd    = mrbsetenv && mrb b -j `getconf _NPROCESSORS_ONLN` --generator ninja


# unit_test:
# for the moment, we ignore failures so we can test the ci phase on MacOS
unit_testdir     = ${MRB_BUILDDIR}
unit_testcmd     = mrb test --sc  -j`getconf _NPROCESSORS_ONLN` --generator ninja
unit_testreport  = sed -n -e "/%/,\$p" $f

# install:
installdir     = ${MRB_TOP}
installcmd     = mrb i --sc --generator ninja

# count_citests:
_count_citestsdir   = ${MRB_TOP}
_count_citestssetup = mrbslp
_count_citestscmd   = echo -e "List of available CI tests:\n`test_runner -l`" ; echo "#Available-CI-tests: "`test_runner -l | grep -Ev "^suite |Tests in no suites" | sort | uniq | wc -l`


# count_running_citests:
_count_running_citestsdir   = ${MRB_TOP}
_count_running_citestssetup = mrbslp
_count_running_citestscmd   = echo -e "List of running CI tests:\n`test_runner -e ${TEST_TESTS:-default}`" ; echo "#Running-CI-tests: `test_runner -C ${TEST_TESTS:-default}`"


# ci_tests:
ci_testsdir    = ${MRB_TOP}
ci_testssetup  = mrbslp
ci_testscmd    = test_runner -v --statistics ${TEST_TESTS:-default}
ci_testsreport = p="Test|Start|passed.*out.of|error:|ERROR:|FAILED:" ; cat $f | egrep "$p" | tail -n 150


# tar_code
_tar_codedir   = ${WORKSPACE}
_tar_codecmd   = moduleVers=`match_args dunetpc "$TEST_REVISION"` && /usr/bin/time tar zcf dunetpc.${moduleVers:-develop}.${TEST_QUALS//:/_}.tar.gz -C ${MRB_TOP} $(basename ${MRB_TOP}/localProducts_*) -C ${WORKSPACE} generic_ci test_ci


# ci_tests_grid
ci_tests_griddir   = ${WORKSPACE}
ci_tests_gridsetup = echo -e "\n\n"; myproxy-info -s myproxy.fnal.gov -vd; echo -e "\n\n"; unsetup cigetcert; setup cigetcert -t #; export JOBSUB_SERVER=https://fermicloud042.fnal.gov:8443
ci_tests_gridcmd   = moduleVers=`match_args dunetpc "$TEST_REVISION"` && submit_jobs.sh --group dune --role Analysis --code-tarball dunetpc.${moduleVers:-develop}.${TEST_QUALS//:/_}.tar.gz
#ci_tests_gridcmd   = moduleVers=`match_args dunetpc "$TEST_REVISION"` && submit_job_on_grid dune Analysis dunetpc.${moduleVers:-develop}.${TEST_QUALS//:/_}.tar
#ci_tests_gridcmd   = moduleVers=`match_args dunetpc "$TEST_REVISION"` && submit_job_on_grid dune Analysis ""
ci_tests_gridreport  = sed  -e "/Submitting grid jobs/p ; 1,/Submitting grid jobs/d" $f


[MRB_UBOONE]
# define what the stages, below, do:
# eval_n:
_eval1 = source /cvmfs/uboone.opensciencegrid.org/products/setup_uboone.sh || source /grid/fermiapp/products/uboone/setup_uboone.sh
_eval2 = . `ups setup ups`
_eval4 = TEST_QUALS="${qualifier}"
_eval5 = `mrb newDev -f -v ${proj_PREFIX}_ci -q $TEST_QUALS | grep source`
_eval6 = source ${MRB_DIR}/bin/mrbSetEnv
_eval7 = export IFDH_CP_MAXRETRIES=1


# checkout_x_modules does this for each $module in $modules
checkoutdir = ${MRB_SOURCE}
checkoutcmd = mdir=`echo $module | tr - _` && mrb g -r -d $mdir -b `match_args $module "$TEST_REVISION,*@develop"` $module


# report_checkout:
_report_checkoutdir = ${MRB_SOURCE}
_report_checkoutcmd = mdir=`echo $module | tr - _` && (cd $mdir && module_repourl_git $module)


# build:
buildsetup  = echo ==========; mrbsetenv ; echo ==========; setup ninja v1_6_0a
builddir    = ${MRB_BUILDDIR}
buildcmd    = mrbsetenv && mrb b -j `getconf _NPROCESSORS_ONLN` --generator ninja


# unit_test:
# for the moment, we ignore failures so we can test the ci phase on MacOS
unit_testdir     = ${MRB_BUILDDIR}
unit_testcmd     = mrb test --sc  -j`getconf _NPROCESSORS_ONLN` --generator ninja
unit_testreport  = sed -n -e "/%/,\$p" $f

# install:
installdir     = ${MRB_TOP}
installcmd     = mrb i --sc --generator ninja

# count_citests:
_count_citestsdir   = ${MRB_TOP}
_count_citestssetup = mrbslp
_count_citestscmd   = echo -e "List of available CI tests:\n`test_runner -l`" ; echo "#Available-CI-tests: "`test_runner -l | grep -Ev "^suite |Tests in no suites" | sort | uniq | wc -l`


# count_running_citests:
_count_running_citestsdir   = ${MRB_TOP}
_count_running_citestssetup = mrbslp
_count_running_citestscmd   = echo -e "List of running CI tests:\n`test_runner -e ${TEST_TESTS:-default}`" ; echo "#Running-CI-tests: `test_runner -C ${TEST_TESTS:-default}`"


# ci_tests:
ci_testsdir    = ${MRB_TOP}
#ci_testssetup  = voms-proxy-init -noregen -rfc -voms dune:/dune/Role=Analysis -valid 24:00; mrbslp
ci_testssetup  = mrbslp
ci_testscmd    = test_runner -v --statistics ${TEST_TESTS:-default}
ci_testsreport = p="Test|Start|passed.*out.of|error:|ERROR:|FAILED:" ; cat $f | egrep "$p" | tail -n 150


# tar_code
_tar_codedir   = ${WORKSPACE}
_tar_codecmd   = moduleVers=`match_args uboonecode "$TEST_REVISION"` && /usr/bin/time tar zcf uboonecode.${moduleVers:-develop}.${TEST_QUALS//:/_}.tar.gz -C ${MRB_TOP} $(basename ${MRB_TOP}/localProducts_*) &&  /usr/bin/time tar zcf ci_modules.tar.gz -C ${WORKSPACE} generic_ci test_ci


# ci_tests_grid
ci_tests_griddir   = ${WORKSPACE}
ci_tests_gridsetup = echo -e "\n\n"; myproxy-info -s myproxy.fnal.gov -vd
ci_tests_gridcmd   = moduleVers=`match_args uboonecode "$TEST_REVISION"` && submit_jobs.sh --group uboone --role Analysis --code-tarball uboonecode.${moduleVers:-develop}.${TEST_QUALS//:/_}.tar.gz --ci-tarball ci_modules.tar.gz
#ci_tests_gridcmd   = moduleVers=`match_args uboonecode "$TEST_REVISION"` && submit_job_on_grid uboone Analysis uboonecode.${moduleVers:-develop}.${TEST_QUALS//:/_}.tar
#ci_tests_gridcmd   = moduleVers=`match_args uboonecode "$TEST_REVISION"` && submit_job_on_grid uboone Analysis ""
ci_tests_gridreport  = sed  -e "/Submitting grid jobs/p ; 1,/Submitting grid jobs/d" $f

# ci_tests_grid_light
ci_tests_grid_lightdir   = ${WORKSPACE}
ci_tests_grid_lightsetup = echo -e "\n\n"; myproxy-info -s myproxy.fnal.gov -vd; setup uboonecode v06_19_00 -q e10:prof; /usr/bin/time tar zcf ci_modules.tar.gz -C ${WORKSPACE} generic_ci test_ci
ci_tests_grid_lightcmd   = submit_jobs.sh --group uboone --role Analysis --ci-tarball ci_modules.tar.gz
#ci_tests_grid_lightcmd   = moduleVers=`match_args uboonecode "$TEST_REVISION"` && submit_job_on_grid uboone Analysis uboonecode.${moduleVers:-develop}.${TEST_QUALS//:/_}.tar
#ci_tests_grid_lightcmd   = moduleVers=`match_args uboonecode "$TEST_REVISION"` && submit_job_on_grid uboone Analysis ""
ci_tests_grid_lightreport  = sed  -e "/Submitting grid jobs/p ; 1,/Submitting grid jobs/d" $f

# main config lists section to get personalty from
[default]
workflow          = ${TEST_WORKFLOW:-TEST_CI_SRT}
notify_email      = vito@fnal.gov,mfattoru@fnal.gov
notify_success    = true
notify_blame      = false
proxy_vo          = /fermilab/nova
email_extra       = Experiment: ${CI_EXPERIMENT}<br>NOvA-Art version: ${TEST_REVISION:-trunk}<br>Build type: ${TEST_QUALS}<br>Platform: `platform`<br>Workflow: ${WORKFLOW}<br>Jenkins project: ${JOB_NAME//\/*}, build ${BUILD_NUMBER}<br>Build slave: `hostname`<br>Trigger: ${TRIGGER_REASON}<br>For more details about this CI build status and to access the logs, please, see <a href="${build_db_uri}/view_builds/index?start=${BUILD_NUMBER}">the web monitoring application</a>.<br>To access more logs see the <a href="$BUILD_URL">Jenkins project</a> web page.<br>
# build_db_uri=http://dbweb6.fnal.gov:8080/NovaCI/app
build_db_uri=http://dbweb6.fnal.gov:8080/TestCI/app
report_logs_extra =



### workflows ###
[TEST_CI_MRB]
experiment    = NOvA
qualifier     = ${TEST_QUALS:-e9:s28:grid:prof}
revision      = ${TEST_REVISION:-development}
ci_test_lists = default
personality   = MRBsvn
proxy_flag    = true
#phases        = _eval_n checkout_x_modules _report_checkout_x_modules build install _count_citests _count_running_citests ci_tests grid_job
phases        = _eval_n checkout_x_modules _report_checkout_x_modules grid_job
modules       = novaart.pkgs.svn


[TEST_CI_SRT]
experiment    = NOvA
qualifier     = ${TEST_QUALS:-maxopt}
revision      = ${TEST_REVISION:-development}
ci_test_lists = default
personality   = SRTsvn
proxy_flag    = true
phases        = _eval_n checkout _report_checkout build _count_citests _count_running_citests ci_tests


[TEST_CI_SRT_GRID]
experiment    = NOvA
qualifier     = ${TEST_QUALS:-maxopt}
revision      = ${TEST_REVISION:-development}
ci_test_lists = default
personality   = SRTsvn
proxy_flag    = true
phases        = _eval_n checkout _report_checkout build _count_citests _count_running_citests _tar_code grid_job



### personalities ###
[MRBsvn]
# define what the phases, below, do:

# eval_n:
_eval1 = source /cvmfs/nova.opensciencegrid.org/externals/setups
_eval2 = . `ups setup ups`
_eval3 = setup mrb
_eval4 = PRODUCTS=`dropit -D -E -p $PRODUCTS:/grid/fermiapp/products/nova/externals`
_eval5 = TEST_QUALS="${qualifier}"
_eval6 = TEST_REVISION="${revision}"
_eval7 = export MRB_PROJECT=novasoft
_eval8 = `mrb newDev -f -v ${proj_PREFIX}_ci -q $TEST_QUALS | grep source`
_eval9 = source ${MRB_DIR}/bin/mrbSetEnv


# checkout_x_modules does this for each $module in $modules
checkoutdir = ${MRB_SOURCE}
checkoutcmd = mdir=`echo $module | tr - _` && moduleVers=`match_args $module "$TEST_REVISION"` && mrb svn -r -d $mdir `if [ -n "${moduleVers}" ]; then echo "-t ${moduleVers}" ; fi` $module && mrb uc


# report_checkout:
_report_checkoutdir = ${MRB_SOURCE}
_report_checkoutcmd = mdir=`echo $module | tr - _` && (cd $mdir && module_repourl_svn $module)


# build:
buildsetup  = echo ==========; mrbsetenv ; echo ==========; setup ninja v1_6_0a
builddir    = ${MRB_BUILDDIR}
buildcmd    = mrbsetenv && mrb b -j `getconf _NPROCESSORS_ONLN` --generator ninja



# unit_test:
unit_testdir = ${MRB_BUILDDIR}
unit_testcmd = mrb test --sc  -j`getconf _NPROCESSORS_ONLN` --generator ninja
unit_testreport= sed -n -e "/%/,\$p" $f


# install:
installdir = ${MRB_TOP}
installcmd = mrb i --sc --generator ninja



# count_citests:
_count_citestsdir   = ${MRB_TOP}
_count_citestssetup = mrbslp
_count_citestscmd   = echo -e "List of available CI tests:\n`test_runner -l`" ; echo "#Available-CI-tests: "`test_runner -l | grep -Ev "^suite |Tests in no suites" | sort | uniq | wc -l`


# count_running_citests:
_count_running_citestsdir   = ${MRB_TOP}
_count_running_citestssetup = mrbslp
_count_running_citestscmd   = echo -e "List of running CI tests:\n`test_runner -e ${TEST_TESTS:-default}`" ; echo "#Running-CI-tests: `test_runner -C ${TEST_TESTS:-default}`"


# ci_tests:
ci_testsdir     = ${MRB_TOP}
ci_testssetup   = mrbslp ; echo ${PRODUCTS}; ups active ; ups depend novasoft -v ${proj_PREFIX}_ci -q e9:s28:grid:prof 2> /dev/null; test -n "$SETUP_IFDHC" || setup ifdhc -z /cvmfs/fermilab.opensciencegrid.org/products/common/db:$PRODUCTS
ci_testscmd     = test_runner -v --statistics ${TEST_TESTS:-default}
ci_testsreport  = p="Test|Start|passed.*out.of|error:|ERROR:|FAILED:" ; cat $f | egrep "$p" | tail -n 150


# grid_job
grid_jobdir   = ${WORKSPACE}
#grid_jobsetup =
grid_jobcmd   = submit_job_on_grid nova Analysis
#grid_jobreport  = sed  -e "/Submitting job using jobsub_submit/p ; 1,/Submitting job using jobsub_submit/d" $f




[SRTsvn]
# define what the phases, below, do:

# eval_n:
_eval1 =  wget https://cdcvs.fnal.gov/redmine/projects/novaart/repository/raw/trunk/SRT_NOVA/scripts/nova_srt_bootstrap &&  chmod +x nova_srt_bootstrap
_eval2 = ./nova_srt_bootstrap ${WORKSPACE}
_eval3 = source ${WORKSPACE}/srt/srt.sh
_eval4 = TEST_QUALS="${qualifier}"
_eval5 = TEST_REVISION="${revision}"


# checkout_x_modules: does this for each $module in $modules
checkoutdir = ${WORKSPACE}
checkoutcmd = moduleVers=`match_args novaart.pkgs.svn "$TEST_REVISION"` && wget https://cdcvs.fnal.gov/redmine/projects/novaart/repository/raw/trunk/SRT_NOVA/scripts/update-release && chmod +x update-release && ./update-release -rel ${moduleVers:-development} && cd ${WORKSPACE}/setup/ && svn update


# report_checkout:
_report_checkoutdir = ${WORKSPACE}/releases
_report_checkoutcmd = moduleVers=`match_args novaart.pkgs.svn "$TEST_REVISION"` && cd ${moduleVers:-development} && module_repourl_svn novaart.pkgs.svn


# build:
buildsetup  = moduleVers=`match_args novaart.pkgs.svn "$TEST_REVISION"` && source ${WORKSPACE}/setup/setup_nova.sh -r ${moduleVers:-development} -b "${TEST_QUALS}" -6 "${WORKSPACE}" -e "/cvmfs/nova.opensciencegrid.org/externals:/grid/fermiapp/products/common/db:/grid/fermiapp/products/nova/externals"
builddir    = ${WORKSPACE}
buildcmd    = ${SRT_PUBLIC_CONTEXT}/SRT_NOVA/scripts/novasoft_build -rel ${moduleVers:-development} -p `getconf _NPROCESSORS_ONLN` -failonerror


# unit_test:
unit_testdir     = ${WORKSPACE}
# unit_testcmd     =


# install:
installdir     = ${WORKSPACE}
# installcmd     =


# count_citests:
_count_citestsdir   = ${WORKSPACE}
#_count_citestssetup =
_count_citestscmd   = echo -e "List of available CI tests:\n`test_runner -l`" ; echo "#Available CI tests: "`test_runner -l | grep -Ev "^suite |Tests in no suites" | sort | uniq | wc -l`


# count_running_citests:
_count_running_citestsdir   = ${WORKSPACE}
#_count_running_citestssetup =
_count_running_citestscmd   = echo -e "List of running CI tests:\n`test_runner -e ${TEST_TESTS:-default}`" ; echo "#Running CI tests: `test_runner -C ${TEST_TESTS:-default}`"


# ci_tests:
ci_testsdir   = ${WORKSPACE}
#ci_testssetup =
ci_testscmd   = test_runner -v --statistics ${TEST_TESTS:-default}
ci_testsreport  = p="Test|Start|passed.*out.of|error:|ERROR:|FAILED:" ; cat $f | egrep "$p" | tail -n 150


# tar_code
_tar_codedir   = ${WORKSPACE}
#_tar_codecmd   = moduleVers=`match_args novaart.pkgs.svn "$TEST_REVISION"` && /usr/bin/time tar zcf NOvAArt.${moduleVers:-development}.${TEST_QUALS}.tar.gz releases/${moduleVers:-development}/{bin/,doc/,lib/,job/,man/,results/,setup/} packages generic_ci test_ci setup srt
_tar_codecmd   = moduleVers=`match_args novaart.pkgs.svn "$TEST_REVISION"` && /usr/bin/time tar zcf NOvAArt.${moduleVers:-development}.${TEST_QUALS}.tar.gz releases packages generic_ci test_ci setup srt


# grid_job
grid_jobdir   = ${WORKSPACE}
#grid_jobsetup =
grid_jobcmd   = moduleVers=`match_args novaart.pkgs.svn "$TEST_REVISION"` && submit_job_on_grid nova Analysis NOvAArt.${moduleVers:-development}.${TEST_QUALS}.tar.gz
grid_jobreport  = sed  -e "/Submitting job using jobsub_submit/p ; 1,/Submitting job using jobsub_submit/d" $f
